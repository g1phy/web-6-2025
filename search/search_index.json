{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"g1phy matteo","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#g1phy","text":"matteo","title":"g1phy"},{"location":"lr1/","text":"\ud83d\udcd8 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430: \u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \ud83e\udde0 \u0426\u0435\u043b\u044c \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0447\u0435\u0442\u0430\u043c\u0438, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b, \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0446\u0435\u043b\u0438, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0431\u044e\u0434\u0436\u0435\u0442\u044b \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f. \ud83d\udee0\ufe0f \u0421\u0442\u0435\u043a \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 FastAPI \u2014 web-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a SQLAlchemy \u2014 ORM Alembic \u2014 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 PostgreSQL \u2014 \u0421\u0423\u0411\u0414 Pydantic \u2014 \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 JWT \u2014 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \ud83d\udce6 \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 JWT \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 (\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440) \u0423\u0447\u0435\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 (\u0434\u043e\u0445\u043e\u0434\u044b/\u0440\u0430\u0441\u0445\u043e\u0434\u044b) \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0435 \u0446\u0435\u043b\u0438 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430: \u0442\u0440\u0430\u0442\u044b \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c, \u0442\u0440\u0435\u043d\u0434\u044b, \u0434\u0430\u0448\u0431\u043e\u0440\u0434 \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438) \ud83c\udfaf \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1 \u2014 \u0442\u044b\u043a \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2 \u2014 \u0442\u044b\u043a \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3 \u2014 \u0442\u044b\u043a","title":"common"},{"location":"lr1/#_1","text":"","title":"\ud83d\udcd8 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430: \u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441"},{"location":"lr1/#_2","text":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0447\u0435\u0442\u0430\u043c\u0438, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b, \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0446\u0435\u043b\u0438, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0431\u044e\u0434\u0436\u0435\u0442\u044b \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f.","title":"\ud83e\udde0 \u0426\u0435\u043b\u044c"},{"location":"lr1/#_3","text":"FastAPI \u2014 web-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a SQLAlchemy \u2014 ORM Alembic \u2014 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 PostgreSQL \u2014 \u0421\u0423\u0411\u0414 Pydantic \u2014 \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 JWT \u2014 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f","title":"\ud83d\udee0\ufe0f \u0421\u0442\u0435\u043a \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439"},{"location":"lr1/#_4","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 JWT \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 (\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440) \u0423\u0447\u0435\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 (\u0434\u043e\u0445\u043e\u0434\u044b/\u0440\u0430\u0441\u0445\u043e\u0434\u044b) \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0435 \u0446\u0435\u043b\u0438 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430: \u0442\u0440\u0430\u0442\u044b \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c, \u0442\u0440\u0435\u043d\u0434\u044b, \u0434\u0430\u0448\u0431\u043e\u0440\u0434 \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438)","title":"\ud83d\udce6 \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"lr1/#_5","text":"","title":"\ud83c\udfaf \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430"},{"location":"lr1/#1","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1 \u2014 \u0442\u044b\u043a"},{"location":"lr1/#2","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2 \u2014 \u0442\u044b\u043a"},{"location":"lr1/#3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3 \u2014 \u0442\u044b\u043a"},{"location":"lr1_api/","text":"\ud83d\udd10 \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0412\u0441\u0435 \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 JWT \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: Authorization: Bearer <token> \u2699\ufe0f \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, declarative_base from dotenv import load_dotenv import os load_dotenv() DATABASE_URL = os.getenv(\"DATABASE_URL\") engine = create_engine(DATABASE_URL) SessionLocal = sessionmaker(bind=engine) Base = declarative_base() \ud83d\udccb \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 class Transaction(Base): __tablename__ = \"transactions\" id = Column(Integer, primary_key=True, index=True) user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False) account_id = Column(Integer, ForeignKey(\"accounts.id\"), nullable=False) amount = Column(Float, nullable=False) date = Column(Date, default=datetime.date.today) description = Column(String) type = Column(Enum(TransactionType), nullable=False) \ud83d\udce4 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0445\u0435\u043c\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430 class TransactionCreate(BaseModel): account_id: int amount: float date: Optional[date] = None description: Optional[str] = None type: Literal[\"income\", \"expense\"] categories: List[TransactionCategoryCreate] \ud83d\udce1 \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0443\u0447\u043a\u0438 @router.post(\"/transactions\", response_model=TransactionOut) def create_transaction_endpoint(transaction: TransactionCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)): try: return create_transaction(db, transaction, current_user.id) except ValueError as e: raise HTTPException(status_code=400, detail=str(e)) \ud83d\udccd \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 def check_budget_exceedance(db: Session, user_id: int, category_id: int): budgets = db.query(Budget).filter(Budget.user_id == user_id, Budget.category_id == category_id).all() for budget in budgets: if budget.start_date and budget.end_date: total_spent = ... if total_spent > budget.limit_amount: create_notification(db, user_id, \"Budget Exceeded\", f\"Spent: {total_spent}, Limit: {budget.limit_amount}\") \ud83e\uddea \u041f\u0440\u0438\u043c\u0435\u0440 CURL-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 Testing User API Endpoints with curl Register a new user curl -X POST \"http://127.0.0.1:8000/auth/register\" \\ -H \"Content-Type: application/json\" \\ -d '{\"username\": \"testuser\", \"email\": \"test@example.com\", \"password\": \"secret\"}' Login to get JWT token curl -X POST \"http://127.0.0.1:8000/auth/login\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"username=testuser&password=secret\" Get current user info (replace JWT_TOKEN with the actual token) curl -X GET \"http://127.0.0.1:8000/auth/users/me\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" Get list of users (replace JWT_TOKEN with the actual token) curl -X GET \"http://127.0.0.1:8000/auth/users\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" Change password (replace JWT_TOKEN with the actual token) curl -X POST \"http://127.0.0.1:8000/auth/change-password\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"old_password\": \"secret\", \"new_password\": \"newsecret\"}' Finance Endpoints Create Transaction curl -X POST \"http://127.0.0.1:8000/finance/transactions\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"account_id\": 1, \"amount\": 50.0, \"description\": \"Dinner\", \"type\": \"expense\", \"categories\": [{\"category_id\": 2, \"allocated_amount\": 50.0}]}' Create Account curl -X POST \"http://127.0.0.1:8000/finance/accounts\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"name\": \"Checking\", \"balance\": 1000.0}' Get Accounts curl -X GET \"http://127.0.0.1:8000/finance/accounts\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" Create category curl -X POST \"http://127.0.0.1:8000/finance/categories\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"name\": \"Groceries\", \"description\": \"Food and supplies\"}' Create budget curl -X POST \"http://127.0.0.1:8000/finance/budgets\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"category_id\": 3, \"period\": \"2025-05\", \"limit_amount\": 100.0, \"start_date\": \"2025-04-01\", \"end_date\": \"2025-12-31\"}' Get categories curl -X GET \"http://127.0.0.1:8000/finance/categories\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" Expense Analysis curl -X GET \"http://127.0.0.1:8000/finance/analysis/expenses\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" Dashboard Summary curl -X GET \"http://127.0.0.1:8000/finance/dashboard\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" Spending Trends curl -X GET \"http://127.0.0.1:8000/finance/trends/spending\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" Get notifications curl -X GET \"http://127.0.0.1:8000/finance/notifications\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \ud83d\uddc2 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 lr1/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 schemas/ \u2502 \u251c\u2500\u2500 crud/ \u2502 \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 database.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 alembic/ \u251c\u2500\u2500 .env \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 README.md \ud83d\ude80 \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438: pip install -r requirements.txt \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 PostgreSQL \u0438 .env : DATABASE_URL=postgresql://user:pass@localhost/dbname \u041f\u0440\u043e\u0433\u043d\u0430\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438: alembic upgrade head \u0417\u0430\u043f\u0443\u0441\u043a: uvicorn app.main:app --reload","title":"api"},{"location":"lr1_api/#_1","text":"\u0412\u0441\u0435 \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 JWT \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: Authorization: Bearer <token>","title":"\ud83d\udd10 \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lr1_api/#_2","text":"from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, declarative_base from dotenv import load_dotenv import os load_dotenv() DATABASE_URL = os.getenv(\"DATABASE_URL\") engine = create_engine(DATABASE_URL) SessionLocal = sessionmaker(bind=engine) Base = declarative_base()","title":"\u2699\ufe0f \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lr1_api/#_3","text":"class Transaction(Base): __tablename__ = \"transactions\" id = Column(Integer, primary_key=True, index=True) user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False) account_id = Column(Integer, ForeignKey(\"accounts.id\"), nullable=False) amount = Column(Float, nullable=False) date = Column(Date, default=datetime.date.today) description = Column(String) type = Column(Enum(TransactionType), nullable=False)","title":"\ud83d\udccb \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"lr1_api/#_4","text":"class TransactionCreate(BaseModel): account_id: int amount: float date: Optional[date] = None description: Optional[str] = None type: Literal[\"income\", \"expense\"] categories: List[TransactionCategoryCreate]","title":"\ud83d\udce4 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0445\u0435\u043c\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430"},{"location":"lr1_api/#_5","text":"@router.post(\"/transactions\", response_model=TransactionOut) def create_transaction_endpoint(transaction: TransactionCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)): try: return create_transaction(db, transaction, current_user.id) except ValueError as e: raise HTTPException(status_code=400, detail=str(e))","title":"\ud83d\udce1 \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0443\u0447\u043a\u0438"},{"location":"lr1_api/#_6","text":"def check_budget_exceedance(db: Session, user_id: int, category_id: int): budgets = db.query(Budget).filter(Budget.user_id == user_id, Budget.category_id == category_id).all() for budget in budgets: if budget.start_date and budget.end_date: total_spent = ... if total_spent > budget.limit_amount: create_notification(db, user_id, \"Budget Exceeded\", f\"Spent: {total_spent}, Limit: {budget.limit_amount}\")","title":"\ud83d\udccd \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430"},{"location":"lr1_api/#curl-","text":"","title":"\ud83e\uddea \u041f\u0440\u0438\u043c\u0435\u0440 CURL-\u0437\u0430\u043f\u0440\u043e\u0441\u0430"},{"location":"lr1_api/#testing-user-api-endpoints-with-curl","text":"","title":"Testing User API Endpoints with curl"},{"location":"lr1_api/#register-a-new-user","text":"curl -X POST \"http://127.0.0.1:8000/auth/register\" \\ -H \"Content-Type: application/json\" \\ -d '{\"username\": \"testuser\", \"email\": \"test@example.com\", \"password\": \"secret\"}'","title":"Register a new user"},{"location":"lr1_api/#login-to-get-jwt-token","text":"curl -X POST \"http://127.0.0.1:8000/auth/login\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"username=testuser&password=secret\"","title":"Login to get JWT token"},{"location":"lr1_api/#get-current-user-info-replace-jwt_token-with-the-actual-token","text":"curl -X GET \"http://127.0.0.1:8000/auth/users/me\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Get current user info (replace JWT_TOKEN with the actual token)"},{"location":"lr1_api/#get-list-of-users-replace-jwt_token-with-the-actual-token","text":"curl -X GET \"http://127.0.0.1:8000/auth/users\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Get list of users (replace JWT_TOKEN with the actual token)"},{"location":"lr1_api/#change-password-replace-jwt_token-with-the-actual-token","text":"curl -X POST \"http://127.0.0.1:8000/auth/change-password\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"old_password\": \"secret\", \"new_password\": \"newsecret\"}'","title":"Change password (replace JWT_TOKEN with the actual token)"},{"location":"lr1_api/#finance-endpoints","text":"","title":"Finance Endpoints"},{"location":"lr1_api/#create-transaction","text":"curl -X POST \"http://127.0.0.1:8000/finance/transactions\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"account_id\": 1, \"amount\": 50.0, \"description\": \"Dinner\", \"type\": \"expense\", \"categories\": [{\"category_id\": 2, \"allocated_amount\": 50.0}]}'","title":"Create Transaction"},{"location":"lr1_api/#create-account","text":"curl -X POST \"http://127.0.0.1:8000/finance/accounts\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"name\": \"Checking\", \"balance\": 1000.0}'","title":"Create Account"},{"location":"lr1_api/#get-accounts","text":"curl -X GET \"http://127.0.0.1:8000/finance/accounts\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Get Accounts"},{"location":"lr1_api/#create-category","text":"curl -X POST \"http://127.0.0.1:8000/finance/categories\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"name\": \"Groceries\", \"description\": \"Food and supplies\"}'","title":"Create category"},{"location":"lr1_api/#create-budget","text":"curl -X POST \"http://127.0.0.1:8000/finance/budgets\" \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer $JWT_TOKEN\" \\ -d '{\"category_id\": 3, \"period\": \"2025-05\", \"limit_amount\": 100.0, \"start_date\": \"2025-04-01\", \"end_date\": \"2025-12-31\"}'","title":"Create budget"},{"location":"lr1_api/#get-categories","text":"curl -X GET \"http://127.0.0.1:8000/finance/categories\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Get categories"},{"location":"lr1_api/#expense-analysis","text":"curl -X GET \"http://127.0.0.1:8000/finance/analysis/expenses\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Expense Analysis"},{"location":"lr1_api/#dashboard-summary","text":"curl -X GET \"http://127.0.0.1:8000/finance/dashboard\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Dashboard Summary"},{"location":"lr1_api/#spending-trends","text":"curl -X GET \"http://127.0.0.1:8000/finance/trends/spending\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Spending Trends"},{"location":"lr1_api/#get-notifications","text":"curl -X GET \"http://127.0.0.1:8000/finance/notifications\" \\ -H \"Authorization: Bearer $JWT_TOKEN\"","title":"Get notifications"},{"location":"lr1_api/#_7","text":"lr1/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 schemas/ \u2502 \u251c\u2500\u2500 crud/ \u2502 \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 database.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 alembic/ \u251c\u2500\u2500 .env \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 README.md","title":"\ud83d\uddc2 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lr1_api/#_8","text":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438: pip install -r requirements.txt \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 PostgreSQL \u0438 .env : DATABASE_URL=postgresql://user:pass@localhost/dbname \u041f\u0440\u043e\u0433\u043d\u0430\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438: alembic upgrade head \u0417\u0430\u043f\u0443\u0441\u043a: uvicorn app.main:app --reload","title":"\ud83d\ude80 \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c"}]}